const mongoose = require('mongoose');
const _ = require('lodash');
const Path = require('path-parser');
const { URL } = require('url');
const requireLogin = require('../middlewares/requireLogin'); //middleware to make sure user's logged in
const requireCredits = require('../middlewares/requireCredits');
const Mailer = require('../services/Mailer');
const surveyTemplate = require('../services/emailTemplates/surveyTemplates');

const Survey = mongoose.model('surveys');

module.exports = (app) => {
    app.get('/api/surveys/:surveyId/:choice', (req, res) => {
        res.send('Thanks for voting');
    });

    app.post('/api/surveys', requireLogin, requireCredits, async (req, res) => {
        const { title, subject, body, recipients } = req.body;

        const survey = new Survey({
            title,
            subject,
            body,
            recipients: recipients.split(',').map(email => ({ email: email.trim() })), 
            _user: req.user.id, //ID automaticly generated by mongoDB
            dateSent: Date.now() 
        });

        const mailer = new Mailer(survey, surveyTemplate(survey));
        try {
            await mailer.send();
            await survey.save();
            req.user.credits -= 1;
            const user = await req.user.save();

            res.send(user);
        } catch (e) {
            res.status(422).send(e);
        }
    });

    app.post('/api/surveys/webhook', (req, res) => {
        const p = new Path('/api/surveys/:surveyId/:choice');
        _.chain(req.body)
                 //destructuring event
            .map(({email, url}) => {
                const match = p.test(new URL(url).pathname);
                if (match) {
                    return {
                        email: email, 
                        surveyId: match.surveyId,
                        choice: match.choice
                    };
                }
            })
            .compact() //removes falsy elements
            .uniqBy('email', 'surveyId') //removes duplicates email & surveyId propertys
            .each((event) => {
                Survey.updateOne({
                    _id: event.surveyId,
                    recipients: {
                        $elemMatch: { email: event.email, responded: false }
                    }
                },{
                    $inc: { [event.choice]: 1} ,
                    $set: { 'recipients.$.responded': true },
                    lastResponded: new Date()
                }).exec()
            })
            .value();

        res.send({});
    });

    app.get('/api/surveys', requireLogin, async (req, res) => {
        const surveys = await Survey.find({ _user: req.user.id })
            .select({recipients: false});

        res.send(surveys);
    });
};